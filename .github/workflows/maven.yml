name: Java CI with Docker Compose

on:
  push:
    branches: [ "main","dev","code-check", "training", "live" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  code-quality-check:
    if: contains(fromJson('["refs/heads/dev","refs/heads/code-check"]'), github.ref)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run code quality tools (Checkstyle, PMD, SpotBugs)
        run: mvn site

      - name: Upload Checkstyle HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-html-report
          path: target/site/checkstyle.html

      - name: Upload PMD HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: pmd-html-report
          path: target/site/pmd.html

      - name: Upload SpotBugs HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-html-report
          path: target/spotbugs.html

  build:
    if: contains(fromJson('["refs/heads/dev","refs/heads/training","refs/heads/code-check", "refs/heads/live"]'), github.ref)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Test SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no root@${{ secrets.TRAINING_SERVER_IP }} "echo Connected"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Build Docker Image
        run: docker build -t yasi-configuration-service:latest .

      - name: Save Docker Image to tar
        run: docker save yasi-configuration-service:latest -o yasi-configuration-service.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: yasi-configuration-service-image
          path: yasi-configuration-service.tar
          
  deploy-training:
    needs: build
    if: github.ref == 'refs/heads/training'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: yasi-configuration-service-image

      - name: Copy Docker image to training server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TRAINING_SERVER_IP }}
          username: ${{ secrets.TRAINING_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "yasi-configuration-service.tar"
          target: "/data/docker-workspace/"

      - name: SSH into training server and deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TRAINING_SERVER_IP }}
          username: ${{ secrets.TRAINING_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker load -i /data/docker-workspace/yasi-configuration-service.tar
            cd /data/docker-workspace/deployment
            docker compose down
            docker compose up -d --force-recreate

  deploy-live:
    needs: build
    if: github.ref == 'refs/heads/live'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: yasi-configuration-service-image

      - name: Copy Docker image to live server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIVE_SERVER_IP }}
          username: ${{ secrets.LIVE_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "yasi-configuration-service.tar"
          target: "/home/${{ secrets.LIVE_SERVER_USER }}/"

      - name: SSH into live server and deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.LIVE_SERVER_IP }}
          username: ${{ secrets.LIVE_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker load -i ~/yasi-configuration-service.tar
            cd /home/${{ secrets.LIVE_SERVER_USER }}/compose/yasi
            docker-compose down
            docker-compose up -d --force-recreate